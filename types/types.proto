syntax = "proto3";

message Age {
    uint64 ticks = 1;
}

message Config {
    PrimitiveMap options = 1;
}

message Player {
    int64 id = 1;
    bytes address = 2;
    string name = 3;
    bool loggedIn = 4;
    AbsolutePoint spawn = 5;
}

message Players {
    map<string, Player> players = 1;
}

message PlayerList {
    repeated string names = 1;
}

message PlayerName {
    string name = 1;
}

message PlayerDetails {
    Player player = 1;
    Entity entity = 2;
}

message Chunk {
    repeated uint64 voxels = 1;  // 3D array stored as a 1D array

    message Compound {
        Inventory inventory = 1;
        PrimitiveMap properties = 2;
        Point multiblockChunk = 3;
    }
    map<uint32, Compound> compound = 2;

    repeated int64 entities = 3;

    message ItemAtPoint {
        Point point = 1;
        Item item = 2;
    }
    repeated ItemAtPoint items = 4;

    repeated Point activeVoxels = 5;
}

message Inventory {
    repeated Item items = 1;
}

message InventorySlot {
    enum ContainerType {
        VOXEL = 0;  // ex: chest
        ENTITY = 1;  // ex: player
        ITEM = 2;  // ex: pouch
    }
    ContainerType containerType = 1;
    oneof containerLocation {
        AbsolutePoint point = 2;
        int64 entityId = 3;
    }
    repeated uint32 slots = 4;  // if 2+ slots then the inventory is nested (bags in bags in bags in...)
}

message Entity {
    enum Control {
        PLAYER = 0;
        NPC = 1;
    }

    int64 id = 1;
    uint32 type = 2;
    Control control = 3;
    AbsolutePoint location = 4;
    PrimitiveMap properties = 5;
    Inventory inventory = 6;
    string playerName = 7;  // only set if control == PLAYER
}

message EntityId {
    int64 id = 1;
}

message Item {
    message Components {
        repeated Item components = 1;
    }

    uint32 form = 1;
    oneof substance {
        uint32 material = 2;
        Components components = 3;
    }
    PrimitiveMap properties = 4;
    Inventory inventory = 5;

}

message AbsolutePoint {
    Point chunk = 1;
    Point voxel = 2;
}

message Point {
    int64 x = 1;
    int64 y = 2;
    int64 z = 3;
}

message Actions {
    repeated Action actions = 1;
}

message Action {
    message MoveAction {
        AbsolutePoint whereTo = 1;
    }
    message CraftAction {
        uint32 verb = 1;
        AbsolutePoint objectLocation = 2;
        repeated InventorySlot inputs = 3;
        repeated uint32 outputForms = 4;
    }

    string playerName = 1;
    oneof action {
        MoveAction move = 2;
        CraftAction craft = 3;
    }

}

message Content {
    map<uint64, EntityDefinition> e = 1;
    // only 2^16 voxel types are supported
    map<uint64, VoxelDefinition> v = 2;
    map<uint64, FormDefinition> f = 3;
    map<uint64, MaterialDefinition> m = 4;
}

message EntityDefinition {
    string name = 1;
    bool falls = 2;
    uint64 inventoryCapacity = 3;
}

message VoxelDefinition {
    string name = 1;

    enum State {
        RigidSolid = 0;  // like stone
        LooseSolid = 1;  // like sand
        Liquid = 2;  // like water
        Gas = 3;  // like air
    }
    State state = 2;
}

message FormDefinition {
    string name = 1;

    // How it's used
    bool Wieldable1Handed = 100;
    bool Wieldable2Handed = 101;

    enum WearableSlot {
        WearableHead = 0;
        WearableChest = 1;
        WearableHands = 2;
        WearableLegs = 3;
        WearableFeet = 4;
        WearableFinger = 5;
        WearableNeck = 6;
        WearableEyes = 7;
        WearableWaist = 8;
    }
    WearableSlot wearableSlot = 200;

    // Tool or Weapon
    //   values are percentages
    uint32 Sharpness = 300;
    uint32 Heft = 301;
    uint32 Digging = 302;
    uint32 Mining = 303;

    // Clothing or Armor
    //   values are percentages
    uint32 PiercingProtection = 400;  // with material, for calculating protection from arrows, swords ,etc
    uint32 BluntProtection = 401;  // with material, for calculating protection from falling, clubs, etc
    uint32 Insulation = 402;  // with material, for calculating resistance to hot or cold

    // Both
    //   values are percentages
    uint32 Strength = 500;
}

message MaterialDefinition {
    string name = 1;

    // Classifications
    bool Metallic = 2;
    bool Wooden = 3;
    bool Fleshy = 4;
    bool Salty = 5;

    // Physical Properties
    uint32 PH = 100;
    uint32 SolidAt = 101;
    uint32 GasAt = 102;

    // Item Properties
    //   values are percentages
    uint32 Sharpness = 200;  // for calculating piercing damage
    uint32 Heft = 201;// for calculating blunt damage; not used for mass
    uint32 Strength = 202;  // for calculating how much damage the item can sustain

}

message PrimitiveMap {
    map<string, Primitive> map = 1;
}

message Primitive {
    oneof value {
        string string = 1;
        int64 int = 2;
        bool bool = 3;
        float float = 4;
    }
}

message Nothing {}
